@page "/localities"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject ApplicationDbContext Context
@inject NavigationManager Navigation
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@attribute [Authorize]

<h1>Localidades</h1>

@if (isLoading)
{
  <p class="text-center">
    <em>Carregando...</em>
  </p>
}
else
{
  <div class="items-per-page">
    <div>
      <a href="/localities/create" class="btn btn-primary">Novo</a>
      <button class="btn btn-secondary" @onclick="ClearFilterAsync">Limpar</button>
    </div>

    <div class="page-size-chooser">
      <span>Itens:</span>
      <select class="form-select custom-select-sm" @bind="@pagination.ItemsPerPage">
        <option>1</option>
        <option>10</option>
      </select>
    </div>
  </div>

  @if (!Localities.Any())
  {
    <p class="text-center">
      <em>@noItemsMessage</em>
    <div><button class="btn btn-link" @onclick="ClearFilterAsync">Voltar</button></div>
    </p>
  }
  else
  {
    <div class="grid table-responsive">
      <QuickGrid Items="@Localities.AsQueryable()" Pagination="@pagination" class="table table-grid">
        <TemplateColumn Title="#" SortBy="@SortByIbgeCode">
          <a class="grid-link" @onclick="@(() => Details(context))">🔗</a>
        </TemplateColumn>

        <PropertyColumn Property="@(item => item.IbgeCode)" Title="IBGE" Sortable="true" Align="Align.Left">
          <ColumnOptions>
            <div class="search-box">
              <input type="search" @oninput="OnInputIbgeCodeAsync" placeholder="Código Ibge..." />
            </div>
          </ColumnOptions>
        </PropertyColumn>

        <PropertyColumn Property="@(item => item.State.Uf)" Title="UF" Sortable="true" Align="Align.Left">
          <ColumnOptions>
            <div class="search-box">
              <input type="search" @oninput="OnInputStateAsync" placeholder="Sigla UF..." />
            </div>
          </ColumnOptions>
        </PropertyColumn>

        <PropertyColumn Property="@(item => item.City)" Title="Cidade" Sortable="true" Align="Align.Left">
          <ColumnOptions>
            <div class="search-box">
              <input type="search" @oninput="OnInputCityAsync" placeholder="Cidade..." />
            </div>
          </ColumnOptions>
        </PropertyColumn>

        <TemplateColumn Title="# Ações">
          <button class="btn btn-primary button-spacing" @onclick="@(() => Edit(context))">Editar</button>
          <button class="btn btn-danger button-spacing" @onclick="@(() => Delete(context))">Excluir</button>
        </TemplateColumn>
      </QuickGrid>
    </div>

    <div class="page-buttons">
      Página:
      @if (pagination.TotalItemCount.HasValue)
      {
        for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
        {
          var capturedIndex = pageIndex;
          <button @onclick="@(() => GoToPageAsync(capturedIndex))" class="@PageButtonClass(capturedIndex) page-button"
            aria-current="@AriaCurrentValue(capturedIndex)" aria-label="Go to page @(pageIndex + 1)">
            @(pageIndex + 1)
          </button>
        }
      }
    </div>
  }
}

@code {
  public IEnumerable<Locality> Localities { get; set; } = Enumerable.Empty<Locality>();

  GridSort<Locality> SortByIbgeCode = GridSort<Locality>
  .ByAscending(l => l.IbgeCode)
  .ThenAscending(l => l.IbgeCode);

  private bool isLoading = true;
  private string noItemsMessage = "Nenhum item encontrado.";
  private string previousFilter = string.Empty;
  private string ibgeCodeFilter = string.Empty;
  private string stateFilter = string.Empty;
  private string cityFilter = string.Empty;
  PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

  protected override async Task OnInitializedAsync() => await LoadDataAsync();

  private async Task LoadDataAsync()
  {
    isLoading = true;
    Localities = await Context
    .Localities
    .Include(l => l.State)
    .AsNoTracking()
    .ToListAsync();
    isLoading = false;

    pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    pagination.ItemsPerPage = 10;
    await GoToPageAsync(0);
  }

  private async Task OnInputIbgeCodeAsync(ChangeEventArgs e)
  {
    previousFilter = ibgeCodeFilter;
    ibgeCodeFilter = e.Value?.ToString() ?? string.Empty;
    await ApplyFilterAsync();
  }

  private async Task OnInputStateAsync(ChangeEventArgs e)
  {
    previousFilter = stateFilter;
    stateFilter = e.Value?.ToString() ?? string.Empty;
    await ApplyFilterAsync();
  }

  private async Task OnInputCityAsync(ChangeEventArgs e)
  {
    previousFilter = cityFilter;
    cityFilter = e.Value?.ToString() ?? string.Empty;
    await ApplyFilterAsync();
  }

  private async Task ApplyFilterAsync()
  {
    Localities = await Context
    .Localities
    .Include(l => l.State)
    .Where(l => l.IbgeCode.ToLower().Contains(ibgeCodeFilter.ToLower())
    &&
    l.State.Uf.ToLower().Contains(stateFilter.ToLower())
    &&
    l.City.ToLower().Contains(cityFilter.ToLower()))
    .ToListAsync();
  }

  private async Task ClearFilterAsync()
  {
    previousFilter = string.Empty;
    ibgeCodeFilter = string.Empty;
    stateFilter = string.Empty;
    cityFilter = string.Empty;
    await LoadDataAsync();
  }

  public void Details(Locality l) => Navigation.NavigateTo($"/localities/{l.Id}");
  public void Edit(Locality l) => Navigation.NavigateTo($"/localities/edit/{l.Id}");
  public void Delete(Locality l) => Navigation.NavigateTo($"/localities/delete/{l.Id}");

  private async Task GoToPageAsync(int pageIndex) => await pagination.SetCurrentPageIndexAsync(pageIndex);
  private string? PageButtonClass(int pageIndex) => pagination.CurrentPageIndex == pageIndex ? "current" : null;
  private string? AriaCurrentValue(int pageIndex) => pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
